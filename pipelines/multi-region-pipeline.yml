Description: Create a CodePipeline to include Nested CloudFormation, CodeBuild and Approval steps.

Outputs:
  S3Bucket:
    Description: S3Bucket to upload ZIP files for deployment
    Value: !Ref S3Bucket

Parameters:
  PrimaryRegion:
    Type: String
    Description: Primary AWS Region for this Pipeline
  SecondaryRegion:
    Type: String
    Description: Secondary AWS Region for this Pipeline
  PrimaryRegionS3ArtifactBucket:
    Type: String
    Description: S3 Bucket in Primary Region for CodePipeline Artifacts
  SecondaryRegionS3ArtifactBucket:
    Type: String
    Description: S3 Bucket in Secondary Region for CodePipeline Artifacts
  SourceS3Key:
    Type: String
    Description: S3 Key for the ZIP Artifact to deploy
  PRODApprovalEmail:
    Type: String
    Description: Email to send PROD approval notifications.

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Upload Artifact
        Parameters:
          - SourceS3Key
      - Label:
          default: Notifications
        Parameters:
          - PRODApprovalEmail

Resources:

  PRODTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName:
        Fn::Sub: PROD-PipelineApproval-${AWS::StackName}
      Subscription:
        -
          Endpoint: !Ref PRODApprovalEmail
          Protocol: email
      TopicName:
        Fn::Sub: PROD-PipelineApproval-${AWS::StackName}

  #The bucket used for triggering CodePipeline must have Versioning Enabled
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
         Status: 'Enabled'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: AllPreviousVersionsDeletedAfter30Days
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30

  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Sub: CodePipelineRole-${AWS::StackName}-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        -
          PolicyName: "CodePipelineNestedCFNAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:DeleteObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                  - "s3:PutObject"
                  - "s3:GetBucketPolicy"
                Resource:
                  - Fn::Sub: arn:aws:s3:::${PrimaryRegionS3ArtifactBucket}
                  - Fn::Sub: arn:aws:s3:::${PrimaryRegionS3ArtifactBucket}/*
                  - Fn::Sub: arn:aws:s3:::${SecondaryRegionS3ArtifactBucket}
                  - Fn::Sub: arn:aws:s3:::${SecondaryRegionS3ArtifactBucket}/*
              -
                Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - Fn::Sub: arn:aws:s3:::${S3Bucket}
                  - Fn::Sub: arn:aws:s3:::${S3Bucket}/*
                  - Fn::Sub: arn:aws:s3:::${S3Bucket}/${SourceS3Key}
              -
                Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource:
                  - !Ref PRODTopic
              -
                Effect: "Allow"
                Action:
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:DeleteChangeSet"
                  - "cloudformation:CreateStack"
                  - "cloudformation:CreateUploadBucket"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:Describe*"
                  - "cloudformation:List*"
                  - "cloudformation:UpdateStack"
                  - "cloudformation:ValidateTemplate"
                  - "cloudformation:ExecuteChangeSet"
                Resource:
                  - Fn::Sub: arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/PROD-${AWS::StackName}*
                  - Fn::Sub: arn:aws:cloudformation:${SecondaryRegion}:${AWS::AccountId}:stack/PROD-PREDEPLOY-${AWS::StackName}*
                  - Fn::Sub: arn:aws:cloudformation:${SecondaryRegion}:${AWS::AccountId}:stack/PROD-${AWS::StackName}*
              -
                Effect: "Allow"
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                Resource:
                  - Fn::Sub: arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/BuildCopyCFN-${AWS::StackName}
                  - Fn::Sub: arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build/BuildCopyCFN-${AWS::StackName}:*
                  - Fn::Sub: arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/ExtractTemplatesCFN-${AWS::StackName}
                  - Fn::Sub: arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build/ExtractTemplatesCFN-${AWS::StackName}:*
              -
                Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource:
                  - Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/CloudFormationRole-${AWS::StackName}-${AWS::Region}

  CloudFormationRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Sub: CloudFormationRole-${AWS::StackName}-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        #note: giving AdministratorAccess as CFN will need just about all permissions to deploy our solution.
        #      This could be refined with more time.
        - arn:aws:iam::aws:policy/AdministratorAccess


  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Sub: CodeBuildRole-${AWS::StackName}-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      Policies:
        -
          PolicyName: "CodeBuildNestedCFNAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "cloudformation:Get*"
                  - "cloudformation:Describe*"
                  - "cloudformation:List*"
                Resource:
                  - Fn::Sub: arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/PROD-${AWS::StackName}*
              -
                Effect: "Allow"
                Action:
                  - "ec2:Describe*"
                  - "cloudformation:ValidateTemplate"
                  - "elasticloadbalancing:Describe*"
                  - "autoscaling:Describe*"
                  - "iam:Get*"
                  - "iam:List*"
                  - "logs:Describe*"
                  - "logs:Get*"
                  - "tag:Get*"
                Resource:
                  - "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              -
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                Resource:
                  - Fn::Sub: arn:aws:s3:::codepipeline-${AWS::Region}-*
                  - Fn::Sub: arn:aws:s3:::${PrimaryRegionS3ArtifactBucket}/*
                  - Fn::Sub: arn:aws:s3:::${PrimaryRegionS3ArtifactBucket}
                  - Fn::Sub: arn:aws:s3:::${SecondaryRegionS3ArtifactBucket}/*
                  - Fn::Sub: arn:aws:s3:::${SecondaryRegionS3ArtifactBucket}
                  - Fn::Sub: arn:aws:s3:::${S3Bucket}
                  - Fn::Sub: arn:aws:s3:::${S3Bucket}/${SourceS3Key}

  ExtractTemplatesCFNProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name:
        Fn::Sub: ExtractTemplatesCFN-${AWS::StackName}
      Description: Build to extract ZIP and pass to next build project
      ServiceRole:
        Fn::GetAtt: [ CodeBuildRole, Arn ]
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 10
            build:
              commands:
                - echo Entered the build phase...
                - echo Build started on `date`
                - find . -name "*.zip" -exec unzip {} \;
          artifacts:
            files:
              - '**/*'
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0

      TimeoutInMinutes: 15
      EncryptionKey:
        Fn::Sub: arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ExtractTemplatesCFN-${AWS::StackName}

  BuildCopyCFNProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name:
        Fn::Sub: BuildCopyCFN-${AWS::StackName}
      Description: Build to validate and copy CFN templates
      ServiceRole:
        Fn::GetAtt: [ CodeBuildRole, Arn ]
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        EnvironmentVariables:
          - Name: TEMPLATE_BUCKET
            Value:
              Ref: PrimaryRegionS3ArtifactBucket
          - Name: TEMPLATE_PREFIX
            Value: codebuild
      TimeoutInMinutes: 15
      EncryptionKey:
        Fn::Sub: arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3
      Tags:
        - Key: Name
          Value:
            Fn::Sub: BuildCopyCFN-${AWS::StackName}


  DeployPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name:
        Fn::Sub: DeployPipeline-${AWS::StackName}
      RoleArn:
          Fn::GetAtt: [ CodePipelineRole, Arn ]
      Stages:
        - Name: CFNSource
          Actions:
            - Name: CFNTemplateSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              OutputArtifacts:
                - Name: CFNTemplateOutput
              Configuration:
                S3Bucket: !Ref 'S3Bucket'
                S3ObjectKey: !Ref 'SourceS3Key'
              RunOrder: 1
        - Name: Extract
          Actions:
            -
              Name: CodeBuild
              InputArtifacts:
                - Name: CFNTemplateOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: CFNExtractedTemplateArtifact
              Configuration:
                ProjectName:
                  Ref: ExtractTemplatesCFNProject
              RunOrder: 1

        - Name: Validate
          Actions:
            -
              Name: CodeBuild
              InputArtifacts:
                - Name: CFNExtractedTemplateArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: CFNTemplateArtifact
              Configuration:
                ProjectName:
                  Ref: BuildCopyCFNProject
              RunOrder: 1

        - Name: !Sub "Production-Predeployment-${SecondaryRegion}"
          Actions:
            - Name: CreateProdPredeploymentChangeSet
              Region: !Ref SecondaryRegion
              InputArtifacts:
                - Name: CFNTemplateArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              OutputArtifacts:
                - Name: ProdPredeploymentChangeSetSecondaryRegion
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: ProdCBChangeSet
                RoleArn:
                  Fn::GetAtt: [ CloudFormationRole, Arn ]
                Capabilities: CAPABILITY_NAMED_IAM
                StackName:
                  Fn::Sub: PROD-PREDEPLOY-${AWS::StackName}
                TemplateConfiguration: !Sub "CFNTemplateArtifact::config-prod-predeploy-${SecondaryRegion}.json"
                TemplatePath: !Sub "CFNTemplateArtifact::master-stack-predeploy-${SecondaryRegion}.yml"
              RunOrder: 1
            - Name: ProdApproval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual
              Configuration:
                NotificationArn: !Ref PRODTopic
                CustomData: Approve deployment in production.
              RunOrder: 2
            - Name: DeployProduction
              Region: !Ref SecondaryRegion
              InputArtifacts:
                - Name: ProdPredeploymentChangeSetSecondaryRegion
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: ProdCBChangeSet
                OutputFileName: SecondaryPreqOutput.json
                StackName:
                  Fn::Sub: PROD-PREDEPLOY-${AWS::StackName}
              OutputArtifacts:
                - Name: SecondaryPrereqOutput
              RunOrder: 3

        - Name: Production-Deployment
          Actions:
            - Name: CreateProdChangeSet
              Region: !Ref PrimaryRegion
              InputArtifacts:
                - Name: CFNTemplateArtifact
                - Name: SecondaryPrereqOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              OutputArtifacts:
                - Name: ProdChangeSet
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: ProdCFChangeSet
                RoleArn:
                  Fn::GetAtt: [ CloudFormationRole, Arn ]
                Capabilities: CAPABILITY_NAMED_IAM
                StackName:
                  Fn::Sub: PROD-${AWS::StackName}
                TemplateConfiguration: CFNTemplateArtifact::config-prod.json
                ParameterOverrides: |
                  {
                    "ReplicantBucket": { "Fn::GetParam" : ["SecondaryPrereqOutput", "SecondaryPreqOutput.json", "ReplicantS3Bucket"]}
                  }
                TemplatePath: CFNTemplateArtifact::master-stack.yml
              RunOrder: 1
            - Name: ProdApproval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual
              Configuration:
                NotificationArn: !Ref PRODTopic
                CustomData: Approve deployment in production.
              RunOrder: 2
            - Name: DeployProduction
              Region: !Ref PrimaryRegion
              InputArtifacts:
                - Name: ProdChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: ProdCFChangeSet
                OutputFileName: ProdStackOutput.json
                StackName:
                  Fn::Sub: PROD-${AWS::StackName}
              OutputArtifacts:
                - Name: ProdStackOutput
              RunOrder: 3

        - Name: !Sub "Production-Deployment-${SecondaryRegion}"
          Actions:
            - Name: CreateProdChangeSet
              Region: !Ref SecondaryRegion
              InputArtifacts:
                - Name: CFNTemplateArtifact
                - Name: ProdStackOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              OutputArtifacts:
                - Name: ProdChangeSetSecondaryRegion
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: ProdCFChangeSetSecondaryRegion
                RoleArn:
                  Fn::GetAtt: [ CloudFormationRole, Arn ]
                Capabilities: CAPABILITY_NAMED_IAM
                StackName:
                  Fn::Sub: PROD-${AWS::StackName}
                TemplateConfiguration: !Sub "CFNTemplateArtifact::config-prod-${SecondaryRegion}.json"
                ParameterOverrides: |
                  {
                    "ReplicationSourceIdentifier": { "Fn::GetParam" : ["ProdStackOutput", "ProdStackOutput.json", "AuroraClusterIdentifier"]}
                  }
                TemplatePath: !Sub "CFNTemplateArtifact::master-stack-${SecondaryRegion}.yml"
              RunOrder: 1
            - Name: ProdApproval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual
              Configuration:
                NotificationArn: !Ref PRODTopic
                CustomData: Approve deployment in production.
              RunOrder: 2
            - Name: DeployProduction
              Region: !Ref SecondaryRegion
              InputArtifacts:
                - Name: ProdChangeSetSecondaryRegion
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: ProdCFChangeSetSecondaryRegion
                StackName:
                  Fn::Sub: PROD-${AWS::StackName}
              RunOrder: 3

      ArtifactStores:
        - Region: !Ref PrimaryRegion
          ArtifactStore:
            Type: S3
            Location:
              Ref: PrimaryRegionS3ArtifactBucket
        - Region: !Ref SecondaryRegion
          ArtifactStore:
            Type: S3
            Location:
              Ref: SecondaryRegionS3ArtifactBucket
